
/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java application project to get you started.
* For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
* User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
*/

plugins {
    // Apply the application plugin to add support for building a Java application
    id 'application'
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    // Use Apache Log4J for logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}


// Define the main class for the application
application {
    mainClass.set("basic_demo.App")
}

description = "A trivial Gradle build"
version = "0.1.0"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // allow duplicates

    manifest {
        attributes "Main-Class": "basic_demo.App"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runServer(type: JavaExec, dependsOn: classes) {
    group = "DevOps"
    description = "Launches a chat server that listens on a specified port"

    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatServerApp'

    // Pass the port number as an argument to the server
    args '59001'
}

task runClient(type:JavaExec, dependsOn: classes){
    group = "DevOps"
    description = "Launches a chat client that connects to a server on localhost:59001 "

    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'basic_demo.ChatClientApp'

    args 'localhost', '59001'
}

tasks.register('backupSrc', Copy) {
    group = "DevOps"
    description = "Backup files from src to backup directory."

    from layout.projectDirectory.dir("src/main")
    into layout.projectDirectory.dir("src/backup").dir("main")
}

tasks.register('archiveSrc', Zip) {
    archiveFileName = "gradleChat.zip"
    destinationDirectory = layout.projectDirectory.dir("src/archive")

    from layout.projectDirectory.dir("src/main")
}